pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
function _init()
	-- create the player
	p = {
		x = 7 * 8,
		y = 11 * 8,
		speed = 1,
		flipped = false
	}
	
	-- create the truck
	truck = {
		x = 3*8,
		y = 5 * 8,
		w = 7,
		h = 8
	}
	truck.grid = create_truck_grid()
	truck.packages = {}
	
	-- create the racks
	racks = {
		{start_x = 1*8, end_x=4*8, y=14.5*8},
		{start_x = 14*8, end_x=9*8, y=14.5*8},
		{start_x = 1*8, end_x=4*8, y=18.5*8},
		{start_x = 14*8, end_x=9*8, y=18.5*8}
	}
end

function _update60()
	update_racks()
	move_player()
	drop_package()
	interact_with_rack()
end

function _draw()
	cls()
	camera(p.x - 60, p.y - 60)
	map(0, 0, 0, 0, 24, 24)

	-- draw elements
	palt(11, true)
	palt(0, false)	
	draw_truck()
	draw_truck_packages()
	draw_player()
	draw_racks()
end


-->8
-- player

--
-- moves the player around the
-- map by setting coordinates
-- based on the inputs and the
-- collisions
--
function move_player()
 local dx, dy = p.x, p.y
 
 -- get the new coordinates
	if (btn(⬆️)) dy -= p.speed
	if (btn(⬇️)) dy += p.speed
	if (btn(⬅️)) then
		dx -= p.speed
		p.flipped = true
	end
	if (btn(➡️)) then
		dx += p.speed
		p.flipped = false
	end
	
	-- if the player will collide
	-- replace it where he was
	if (is_colliding(dx, p.y)) dx = p.x
	if (is_colliding(p.x, dy)) dy = p.y

 -- apply the new coordinates
	p.x = dx
	p.y = dy  
end

-- 
-- drops the package on the 
-- truck floor
--
function drop_package()
	if p.holding_package and btnp(❎) then
		local x, y = placeholder_offset(p.x, p.y, p.holding_package)
		if can_put_package(p.x, p.y, p.holding_package) then
			add_package_to_grid(x, y, p.holding_package)
			p.holding_package = nil
		end
	end
end

-- 
-- interacts with a rack
-- 
-- find a rack the player can
-- interact with and get the
-- package from the rack
--
function interact_with_rack()
	if (p.holding_package) return

	for i=1, #racks do
		if can_interact(racks[i].package) and btnp(❎) then
			p.holding_package = racks[i].package
			racks[i].package = get_random_package()
			racks[i].package.x = racks[i].start_x
	 	racks[i].package.y = racks[i].y		
		end
	end
end

-- 
-- check if the player can
-- interact with an object
-- 
-- * object: the object
-- to check. it must have a 
-- x and y coordinate.
--
function can_interact(object)
	return dst(p, object) < 16 
end

-- 
-- gets the distance between
-- two objects
--
-- the objects must have x and
-- y coordinates
-- 
-- * a: the first object
-- * b: the second object
--
function dst(a, b)
	return sqrt((a.x - b.x)^2 + (a.y - b.y)^2)
end
-->8
-- truck

-- 
-- creates the truck grid
-- by create a grid of boolean
-- values set to false
--
function create_truck_grid()
	local grid = {}
	for row = 1, truck.h do 
		grid[row] = {}
		for column = 1, truck.w do
			grid[row][column] = false
		end
	end
	return grid
end

--
-- adds the package to the truck
-- grid and adds it to the total
-- of packages contained in the 
-- truck
--
function add_package_to_grid(x, y, package)
	iter_grid(package, function(row, column, is_filled)
		if is_filled then
   	truck.grid[row + y][column + x] = true
		end
	end)
	
	add(truck.packages, {x=x, y=y, package=package})
end


-->8
-- packages

-- 
-- updates the racks by moving
-- there packages all along
--
function update_racks()
	for i=1,#racks do
		if not racks[i].package then
			racks[i].package = get_random_package()
			racks[i].package.x = racks[i].start_x
			racks[i].package.y = racks[i].y
		elseif racks[i].package.x != racks[i].end_x then
			racks[i].package.x += 0.5 * sgn(racks[i].end_x - racks[i].start_x)
		end
	end
end

-- 
-- create a package based on the
-- given id
--
-- * id: the id that determines
-- which package to create
--
function create_package(id)

	local package
	if (id == 1) then
	 package = {{ true, true, true },
													{ false, true, false }}
		package.spr = {id=69, w=3, h=2}
	elseif (id == 2) then
		package = {{ true, true },
													{ true, true }}
		package.spr = {id=64, w=2, h=2}
	elseif (id == 3) then
		package = {{ false, true, true },
													{ true, true, false }}
		package.spr = {id=66, w=3, h=2}
	elseif (id == 4) then 
		package = {{ true, true, true, true }}
		package.spr = {id=72, w=4, h=1}
	end
	
	-- add the id to the package
	package.id = id
	
	return package
end

-- 
-- gives a random package
--
function get_random_package()
		return create_package(flr(rnd(4)) + 1)
end

-->8
-- draw

-- 
-- draws the truck floor
-- 
function draw_truck()
 for row = 1, #(truck.grid) do 
		for column = 1, #(truck.grid[row]) do
			spr(2, truck.x + column *8 - 8, truck.y + row *8 - 8)
		end
	end
end

-- 
-- draws the packages inside
-- the truck
--
function draw_truck_packages()
	foreach(truck.packages, function(package)
		local x, y, p = package.x, package.y, package.package
		spr(p.spr.id, truck.x + x * 8, truck.y + y * 8, p.spr.w, p.spr.h)
	end)
end

-- 
-- draws the player
--
function draw_player()
	spr(1, p.x, p.y, 1, 1, p.flipped)
	
	if p.holding_package then
		draw_placeholder(p.x, p.y, p.holding_package)
	end
end

--
-- draws the packages on the 
-- racks, and shows the package
-- preview when the user is 
-- nearby
--
function draw_racks()
 -- draw the packages
	foreach(racks, function(rack)
		spr(17, rack.package.x, rack.package.y)
	end)
	
	-- draw the package preview
	foreach(racks, function(rack)
		if can_interact(rack.package) then
			print("❎", p.x, p.y - 8, 7)
			fill_rect(p.x, p.y - 10, 7, 7, 7)
			iter_grid(rack.package, function(row, column, element)
				if element == true then
					pset(p.x + 2 + column, p.y - 8 + row, 4)
				end
			end)
			return
		end
	end)
end

-- 
-- draws the package placeholder
-- so the player sees if the 
-- package can be dropped on the
-- floor of the truck
-- 
-- * x: the x position where the
-- package will be dropped on 
-- the truck grid
-- * y: the y position where the
-- package will be dropped on 
-- the truck grid
-- * package: the package that
-- will be dropped
-- 
function draw_placeholder(x, y, package)
	-- get the offset
	local x, y = placeholder_offset(x, y, package)
	local dx, dy = flr(truck.x / 8) - 1, flr(truck.y / 8) - 1
	
	for row = 1, #package do
		for column = 1, #(package[row]) do
			-- if we can drop the package
			-- draw a yellow rect
			if truck.grid[row + y] and truck.grid[row + y][column + x] == false and package[row][column] == true then
				draw_rect((x + column + dx) * 8, (y + row + dy) * 8, 8, 8, 10)
			
			-- if we can't, draw a red 
			-- rect
			elseif package[row][column] == true then
				draw_rect((x + column + dx) * 8, (y + row + dy) * 8, 8, 8, 8)
			end
		end
	end
end

-->8
-- utils

--
-- checks that an object of size
-- 8x8 collides with an element
-- of the map
--
-- * x: the x coordinate of the
-- object
-- * y: the y coordinate of the
-- object 
-- 
function is_colliding(x, y)
	return is_collidable(mget(x / 8, (y + 7) / 8))
					or is_collidable(mget((x + 7) / 8, (y + 7) / 8))
					or is_collidable(mget((x + 7) / 8, y / 8))
					or is_collidable(mget((x / 8), y / 8))
end

-- 
-- checks that the given tile
-- is collidable
-- 
-- * tile: the id of the tile
--
function is_collidable(tile)
	return fget(tile, 0)
end

-- 
-- gives the offset used for the
-- placeholder of the package
--
-- * x: the x position where the
-- package will be dropped on 
-- the truck grid
-- * y: the y position where the
-- package will be dropped on 
-- the truck grid
-- * package: the package that
-- will be dropped
--
function placeholder_offset(x, y, package)
	return flr((x - truck.x) / 8), flr((y - truck.y) / 8) - #package - 1
end

-- 
-- iterates over a grid, using
-- a function that gives the 
-- information on each iteration
--
-- * grid: the grid to iterate
-- over
-- * func: the function to use
-- for each iteration
--
function iter_grid(grid, func)
	for i=1,#grid do
		for j=1,#grid[i] do
			func(i, j, grid[i][j])
		end
	end
end

--
-- checks that the player can 
-- drop the package at the given
-- position
--
-- * x: the x position where to
-- drop the package
-- * y: the y position where to
-- drop the package
-- * package: the package to drop
--
function can_put_package(x, y, package)
	-- get the package info
	local x, y = placeholder_offset(x, y, package)
	local package_fits = x >= 0
																				and truck.w >= x + #(package[1])
																				and y >= 0
																				and truck.h >= y + #(package)
	
	
	-- check that the package fits
	-- in the grid
	if (not package_fits) return false
	
	-- check that the package does
	-- not overlaps an existing 
	-- package
	for row=1,#package do
	 for column=1,#(package[row]) do
		 if package[row][column] and truck.grid[row + y][column + x] == true then
		  return false
  	end
  end
 end
 
 -- if every check passed, then
 -- the player can drop the
 -- package
	return true
end

-- 
-- draws a rectangle
-- 
-- * x: the x position of the 
-- rectangle
-- * y: the y position of the
-- rectangle
-- * w: the width of the
-- rectangle
-- * h: the height of the 
-- rectangle
-- * clr: the color of the
-- rectangle
--
function draw_rect(x, y, w, h, clr)
	rect(x, y, x+w, y+h, clr)
end

-- 
-- draws a filled rectangle
-- 
-- * x: the x position of the 
-- rectangle
-- * y: the y position of the
-- rectangle
-- * w: the width of the
-- rectangle
-- * h: the height of the 
-- rectangle
-- * clr: the color of the
-- rectangle
--
function fill_rect(x, y, w, h, clr)
	rectfill(x, y, x+w, y+h, clr)
end
__gfx__
00000000bbaaaaab6666655688488488000000000000000000000000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00000000bbf0f0bb5666d66644444444000000000000000000000000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00700700bb44e4bb566d66668488488400088000000aaa5555aaa000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00077000bba55aab6d666d664444444400d88d000007777777777000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00077000bb7557bb66d666d68848848800dddd000007767777677000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00700700bb9999bb6666d66544444444000dd0000007776776777000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00000000bb9999bb666d666548848848000dd0000007767777677000dddddddddddddddddddddddd000000000000000000000000000000000000000000000000
00000000bb4bb4bb6556666644444444000dd0000007776776777000dddddddd4444444444444444000000000000000000000000000000000000000000000000
00000000bbbb00bb0000000000000000000000000007767777677000000000004444444444444444000000000000000000000000000000000000000000000000
00000000bb00440b0000000000000000000000000007777777777000000000004444444444444444000000000000000000000000000000000000000000000000
00000000b04445400000000000000000000000000076666666666700000000004444444444444444000000000000000000000000000000000000000000000000
00000000044544500000000000000000000000000077777777777700000000006060606060607070000000000000000000000000000000000000000000000000
00000000044444400000000000000000000000000677777777777760000000005555555555555555000000000000000000000000000000000000000000000000
00000000044774400000000000000000000000000077777777777700000000005dddd5dddd5dddd5000000000000000000000000000000000000000000000000
00000000b044440b0000000000000000000000000077777777777700000000005dddd5dddd5dddd5000000000000000000000000000000000000000000000000
00000000bb0000bb0000000000000000000000000077777777777700000000005dddd5dddd5dddd5000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbb000000000bbbbbbbbbbb00000000000000bb0000000000000000000000bb0000000bbbbbbbbbbbbbbbb0000000b00000000000000000000000000000000
b00004444444440bbbbbbbbb04444444444444400444444444444545444444400444444400000000000000004444444000000000000000000000000000000000
044445444455540bbbbbbbbb04444444444444400444444444444454444444400444444444444444444444544444444000000000000000000000000000000000
044544444444440bbbbbbbbb04444445544444400444444444444444444444400444444444444444444455447744444000000000000000000000000000000000
0444444444444440bbbbbbbb04444444447774400444444444444444444444400444444454444444444444444444454000000000000000000000000000000000
0444444444444440bbbbbbbb04444444444444400444554444447744444444400444445544444444454444447744544000000000000000000000000000000000
0444444444444440bbbbbbbb0444444444777440b0000000044444400000000bb000000000000044445444444444440b00000000000000000000000000000000
0444444444444450bbbbbbbb044444400000000bbbbbbbbb04447740bbbbbbbbbbbbbbbbbbbbbb0000000000000000bb00000000000000000000000000000000
0444444444455440bb00000044444440bbbbbbbbbbbbbbbb04444540bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
0454444445544440b044444444445440bbbbbbbbbbbbbbbb04444540bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
b045444447774440b044444444455440bbbbbbbbbbbbbbbb04544440bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
b044444444445440b044444444444440bbbbbbbbbbbbbbbb04544440bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
b044544447775440b044444444444440bbbbbbbbbbbbbbbb04554440bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
b044544444444440b045555444444440bbbbbbbbbbbbbbbb04454440bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
bb0444444444000bb04444444444000bbbbbbbbbbbbbbbbb04444440bbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
bbb000000000bbbbbb0000000000bbbbbbbbbbbbbbbbbbbb0000000bbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000103000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000500000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001500000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000202020202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030707070707070703030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0307070707070707070707070707070300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0308090809070707070809080908090300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0318191819070707071819181918190300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0307070707070707070707070707070300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0307070707070707070707070707070300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0308090809070707070809080908090300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0318191819070707071819181918190300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
